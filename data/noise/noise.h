//
// Created by serik1987 on 05.11.2019.
//

#ifndef MPI2_NOISE_H
#define MPI2_NOISE_H

#include "../Matrix.h"
#include "distributions.h"

namespace data::noise{

    /**
     * Base class for all supported noises
     * Noise accepts the data generated by the distribution and combines them with the existent data
     */
    class Noise{
    protected:
        data::Matrix& matrix;
        Distribution& distribution;
    public:
        /**
         * Constructs the noise. Please note, that the child objects will not be destroyed after the noise complete
         * its job
         *
         * @param mtx matrix that contains the output signal at a given sample/timestamp
         * @param dist certain distribution
         */
        Noise(data::Matrix& mtx, Distribution& dist): matrix(mtx), distribution(dist) {};

        virtual void update() = 0;
    };

    /**
     * Generates the white noise.
     * In white noise any number at a given timestamp is independent on another values
     */
    class WhiteNoise: public Noise{
    public:
        WhiteNoise(data::Matrix& matrix, Distribution& dist): Noise(matrix, dist) {};
        void update() override;
    };

    /**
     * Generates brown noise
     * In brown noise x[n] = x[n-1] + k * psi[n]
     * x[n] - noise value at a given sample
     * x[n-1] - noise value at a previous sample
     * k - stochasticity coefficient
     * psi[n] - some white noise
     */
    class BrownNoise: public Noise{
    private:
        double k;
    public:
        /**
         * Constructs the noise
         *
         * @param matrix dats where output signal at a current timestamp will be stored
         * @param dist the predefined distribution from distributions.h
         * @param coefficient stochasticity coefficient
         */
        BrownNoise(data::Matrix& matrix, Distribution& dist, double coefficient): Noise(matrix, dist),
            k(coefficient) {};

        /**
         * returns the noise at timestamp n given the noise at timestamp n-1 has already been gained
         */
        void update() override;
    };

}


#endif //MPI2_NOISE_H
