//
// Created by serik1987 on 04.11.2019.
//

#ifndef MPI2_NOISEENGINE_H
#define MPI2_NOISEENGINE_H

#include <random>
#include "../../compile_options.h"

namespace data::noise {

    /**
     * This is an adaptor to C++-defined noise generator that allows all processes to generates different pseudo-
     * random numbers
     * Usually the generator generates the number in the sequence and discards
     * numprocs-1 other numbers
     *
     * PrimaryGenerator - generates small number (at least one) truly random numbers (usually std::random_device);
     * may be any functor
     *
     * SecondaryGenerator - generates large number of pseudo-random number using one of the selected algorithms
     * (usually std::mt19937).
     *
     * You can create your own noise engine by means of 'using' operator or use the predefined noise engine
     * known as NoiseEngine
     */
    template <class PrimaryGenerator, class SecondaryGenerator> class NoiseEngineTemplate {
    private:
        PrimaryGenerator* primaryGenerator = nullptr;
        SecondaryGenerator* secondaryGenerator = nullptr;
    public:
        using result_type = typename SecondaryGenerator::result_type;

        /**
         * Creates the noise engine. First, it creates the primary generator of type PrimaryGenerator.
         * Secondly, it uses the primary generator
         * to generate the seed. Thirdly, it creates the secondary generator of type SecondaryGenerator with the
         * recently generated seed.
         *
         * The seed will be generated by the process with rank 0 and then will be broadcasted to all other processes
         */
        NoiseEngineTemplate();

        /**
         * Copying or moving the engine is not allowed. Use Application::getInstance().getNoiseEngine() to
         * return a reference to the instance of the engine
         */
        NoiseEngineTemplate(const NoiseEngineTemplate&) = delete;

        virtual ~NoiseEngineTemplate();

        /**
         *
         * @return the minimum value that can be generated by the engine
         */
        static constexpr long unsigned int min() { return SecondaryGenerator::min(); };

        /**
         *
         * @return the maximum value that can be generated by the engine
         */
        static constexpr long unsigned int max() { return SecondaryGenerator::max(); }

        /**
         * Re-initializes the second generator by the value generated by the primary generator
         */
        void seed();

        /**
         * Sets the initial seed to the generator
         *
         * @param value the seed itself
         */
        void seed(unsigned long int value) { secondaryGenerator->seed(value); }

        /**
         * Sets the seed sequence to the generator
         *
         * @param q the seed sequence itself
         */
        template<class Sseq&> void seed(Sseq& q) { secondaryGenerator->seed(q); }

        /**
         * Generates the random number. The generated number will be placed to the local space of the process
         * called the function. Actually, the function is not collective but the best performance will be achieved
         * when this will be run the same times for all processes (recommended but not required)
         *
         * @return an integer number randomly chosen from the range pointed by min() and max() functions
         */
        unsigned long int operator()();

        /**
         * Advances the internal state by z notches, as if operator() was called z times,
         * but without generating any numbers in the process.
         * This routine is not collective but the same producibility will be achieved when this will run
         * simultaneously by all processes with the same argument
         *
         * @param z number of times to discard
         */
        void discard(unsigned long long z);

        /**
         *
         * @return the secondary generator
         */
        SecondaryGenerator& base() { return *secondaryGenerator; }
    };

#if DEBUG==1
    class DebugNoiseGenerator{
    private:
        static constexpr int seed = 0;
    public:

        int operator()() { return seed; }
    };

    using TestNoiseEngine = NoiseEngineTemplate<DebugNoiseGenerator, SECONDARY_GENERATOR>;
#endif

    using NoiseEngine = NoiseEngineTemplate<PRIMARY_GENERATOR, SECONDARY_GENERATOR>;

}


#endif //MPI2_NOISEENGINE_H
